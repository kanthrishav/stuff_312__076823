import pandas as pd
import numpy as np
import plotly.graph_objects as go

# Read the dataframe from the feather file.
df = pd.read_feather("data.feather")

# Precompute marker size and color based on the 'label'
# For points with label "irrelevant", marker size is 2; otherwise, size is 4.
df["marker_size"] = df["label"].apply(lambda l: 2 if l == "irrelevant" else 4)
# Set marker color based on label: "inEgoLaneLOS" -> red, "inLeftLaneLOS" or "inRightLaneLOS" -> blue, "irrelevant" -> grey.
df["marker_color"] = df["label"].apply(lambda l: "red" if l == "inEgoLaneLOS" 
                                         else ("blue" if l in ["inLeftLaneLOS", "inRightLaneLOS"] else "grey"))

# Create hover text using values from columns "vx", "vy", "poe", "dp", "pfd"
# (Assuming "vx" corresponds to "vs" in your hover text requirements.)
df["hover_text"] = ("vx: " + df["vx"].astype(str) + "<br>" +
                    "vy: " + df["vy"].astype(str) + "<br>" +
                    "poe: " + df["poe"].astype(str) + "<br>" +
                    "dp: " + df["dp"].astype(str) + "<br>" +
                    "pfd: " + df["pfd"].astype(str))

# Get sorted unique timestamps to ensure the slider steps are in order.
unique_timestamps = np.sort(df["mc"].unique())

# Group the dataframe by timestamp 'mc' for creating animation frames.
groups = df.groupby("mc")

frames = []
# Loop through each group (each timestamp) and create a frame.
for mc_val, group in groups:
    # For plotting, swap the axes: use the original 'y' as the plot x-axis and 'x' as the plot y-axis.
    scatter = go.Scattergl(
        x=group["y"],
        y=group["x"],
        mode='markers',
        marker=dict(
            size=group["marker_size"],
            color=group["marker_color"],
        ),
        text=group["hover_text"],
        hoverinfo="text"
    )
    
    # Each timestamp has a unique egoYawAngle.
    # In sensor coordinates the line would point from (0,0) to (5*cos(angle), 5*sin(angle)).
    # Since we swap x and y for plotting, the line endpoint becomes (5*sin(angle), 5*cos(angle)).
    ego_yaw = group["egoYawAngle"].iloc[0]
    x_line = 5 * np.sin(ego_yaw)
    y_line = 5 * np.cos(ego_yaw)
    
    line = go.Scattergl(
        x=[0, x_line],
        y=[0, y_line],
        mode='lines',
        line=dict(dash='dot', color='black', width=1),
        hoverinfo='skip'
    )
    
    frames.append(go.Frame(data=[scatter, line], name=str(mc_val)))

# Create the initial frame data using the first timestamp.
first_mc = unique_timestamps[0]
first_group = groups.get_group(first_mc)
initial_scatter = go.Scattergl(
    x=first_group["y"],
    y=first_group["x"],
    mode='markers',
    marker=dict(
        size=first_group["marker_size"],
        color=first_group["marker_color"],
    ),
    text=first_group["hover_text"],
    hoverinfo="text"
)
ego_yaw = first_group["egoYawAngle"].iloc[0]
x_line = 5 * np.sin(ego_yaw)
y_line = 5 * np.cos(ego_yaw)
initial_line = go.Scattergl(
    x=[0, x_line],
    y=[0, y_line],
    mode='lines',
    line=dict(dash='dot', color='black', width=1),
    hoverinfo='skip'
)

# Build the figure with the initial data and all animation frames.
fig = go.Figure(
    data=[initial_scatter, initial_line],
    frames=frames
)

# Create slider steps for each timestamp.
slider_steps = []
for ts in unique_timestamps:
    slider_steps.append(dict(
        method='animate',
        args=[[str(ts)],
              dict(mode='immediate',
                   frame=dict(duration=0, redraw=True),
                   transition=dict(duration=0)
                  )
             ],
        label=str(ts)
    ))

sliders = [dict(
    active=0,
    currentvalue={"prefix": "Timestamp: "},
    pad={"t": 50},
    steps=slider_steps
)]

# Update layout with the slider and axis titles.
fig.update_layout(
    sliders=sliders,
    xaxis_title="y position (m)",
    yaxis_title="x position (m)",
    xaxis=dict(scaleanchor="y", scaleratio=1),  # ensures equal scaling on both axes
    yaxis=dict(),
    # The use of Scattergl ensures WebGL-based rendering for improved performance.
)

# Write the animated plot into an HTML file.
fig.write_html("plot.html")
