import os
import time
import math
import numpy as np
import pandas as pd
import vaex
import panel as pn
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource, HoverTool, Span
from numba import njit, prange

# ---------------------------
# INITIALIZE PANEL
# ---------------------------
pn.extension()
pn.config.raw_css.append("""
    .bk-root { font-family: "Courier New", monospace; }
    body { margin: 0; padding: 0; }
""")
print(f"[{time.time():.3f}] Panel extension loaded.")

# ---------------------------
# PARAMETERS & FILE PATHS
# ---------------------------
LOS_thresh = 0.035  # New LOS threshold
original_file_path = "data_original.feather"
preprocessed_file_path = "data_preprocessed.feather"

# ---------------------------
# DATA PREPROCESSING
# ---------------------------
start_total = time.time()
preprocess_start = time.time()

if os.path.exists(preprocessed_file_path):
    print(f"[{time.time()-preprocess_start:.3f} sec] Preprocessed file found. Loading dataframe.")
    pdf = pd.read_feather(preprocessed_file_path)
else:
    print(f"[{time.time()-preprocess_start:.3f} sec] Preprocessed file not found. Reading original data.")
    pdf = pd.read_feather(original_file_path)
    
    # Compute basic geometric quantities
    pdf['az'] = np.arctan2(pdf['y'].values, pdf['x'].values)
    pdf['r'] = np.hypot(pdf['x'].values, pdf['y'].values)
    pdf['Motion'] = np.where(pdf['dp'].isin([1, 2, 5, 6]), 1, 0)
    print(f"[{time.time()-preprocess_start:.3f} sec] Basic columns computed.")

    # LOS computation using Numba (parallelized)
    @njit(parallel=True)
    def compute_all_los(sorted_az, sorted_r, group_start, group_end, thresh):
        n_groups = group_start.shape[0]
        los_sorted = np.empty(sorted_az.shape[0], dtype=np.int8)
        for i in prange(n_groups):
            start = group_start[i]
            end = group_end[i]
            for j in range(start, end):
                flag = 1
                for k in range(start, end):
                    if j != k:
                        if sorted_r[k] < sorted_r[j] and math.fabs(sorted_az[k] - sorted_az[j]) < thresh:
                            flag = 0
                            break
                los_sorted[j] = flag
        return los_sorted

    mc_arr = pdf['mc'].values
    order = np.argsort(mc_arr)
    sorted_mc = mc_arr[order]
    sorted_az = pdf['az'].values[order]
    sorted_r = pdf['r'].values[order]
    unique_mc, group_start = np.unique(sorted_mc, return_index=True)
    group_end = np.empty_like(group_start)
    for i in range(len(group_start)-1):
        group_end[i] = group_start[i+1]
    group_end[-1] = len(sorted_mc)
    
    los_sorted = compute_all_los(sorted_az, sorted_r, group_start, group_end, LOS_thresh)
    los = np.empty_like(los_sorted)
    los[order] = los_sorted
    pdf['LOS'] = los
    print(f"[{time.time()-preprocess_start:.3f} sec] LOS column computed.")

    # Label computation: convert egoYawRate to deg/s and use absolute value
    mirrProb = pdf['mirrProb'].values
    egoYawRate = pdf['egoYawRate'].values
    egoSpeed = pdf['egoSpeed'].values
    Motion = pdf['Motion'].values
    LOS = pdf['LOS'].values
    egoYawRate_deg = np.degrees(egoYawRate)
    y_vals = pdf['y'].values
    cond = (mirrProb < 71) & (np.abs(egoYawRate_deg) < 2) & (egoSpeed > 0.2) & (Motion == 1) & (LOS == 1)
    labels = np.zeros(len(pdf), dtype=np.int8)
    labels[np.where(cond & (y_vals >= -2) & (y_vals <= 2))] = 1
    labels[np.where(cond & (y_vals >= -6) & (y_vals < -2))] = 2
    labels[np.where(cond & (y_vals > 2) & (y_vals <= 6))] = 3
    pdf['label'] = labels
    print(f"[{time.time()-preprocess_start:.3f} sec] Label column computed.")

    # OOI computation (vectorized)
    labels_arr = pdf['label'].values
    mc_arr = pdf['mc'].values
    r_arr = pdf['r'].values
    mask = (labels_arr == 1) | (labels_arr == 2) | (labels_arr == 3)
    sel = np.where(mask)[0]
    pdf['OOI'] = 0
    if sel.size > 0:
        sel_mc = mc_arr[sel]
        sel_label = labels_arr[sel]
        sel_r = r_arr[sel]
        order_sel = np.argsort(sel_r)
        ordered_sel = sel[order_sel]
        keys = np.stack((mc_arr[ordered_sel], labels_arr[ordered_sel]), axis=1)
        unique_keys, unique_idx = np.unique(keys, axis=0, return_index=True)
        selected_indices = ordered_sel[unique_idx]
        pdf.loc[selected_indices, 'OOI'] = 1
    print(f"[{time.time()-preprocess_start:.3f} sec] OOI column computed.")

    pdf.to_feather(preprocessed_file_path)
    print(f"[{time.time()-preprocess_start:.3f} sec] Preprocessed dataframe saved.")

print(f"[{time.time()-preprocess_start:.3f} sec] Data preprocessing complete.")
print(f"[{time.time()-start_total:.3f} sec] Total initialization complete.")

# Convert to Vaex dataframe for on-demand filtering
df = vaex.from_pandas(pdf)

# ---------------------------
# DASHBOARD CREATION
# ---------------------------
dashboard_start = time.time()

# Build radar cycle slider from actual unique mc values (as integers)
unique_mcs = sorted(list(set(pdf['mc'].astype(int).tolist())))
radar_cycle_slider = pn.widgets.DiscreteSlider(
    name='Radar Cycle Slider',
    options=unique_mcs,
    value=unique_mcs[0],
    width=1400
)

# New text box and button for direct cycle input.
cycle_input = pn.widgets.TextInput(name="Cycle Input", value="", width=100)
cycle_go_button = pn.widgets.Button(name="Go", button_type="primary")

def go_to_cycle(event):
    try:
        val = int(cycle_input.value)
        if val in unique_mcs:
            radar_cycle_slider.value = val
        else:
            print(f"Cycle {val} not found in data.")
    except Exception as e:
        print("Invalid cycle input:", e)

cycle_go_button.on_click(go_to_cycle)

# Filter Panel: vertical stack of filter sliders plus X- and Y-axis sliders.
# (Set Age slider default to 0 so that filtering does not remove all objects by default.)
eyr_slider = pn.widgets.FloatSlider(name='EYR Slider', start=0, end=5, value=2, step=0.01)
es_slider = pn.widgets.FloatSlider(name='ES Slider', start=0, end=10, value=0.2, step=0.1)
mp_slider = pn.widgets.FloatSlider(name='MP Slider', start=0, end=100, value=71, step=1)
age_slider = pn.widgets.FloatSlider(name='Age Slider', start=0, end=100, value=0, step=1)
x_axis_slider = pn.widgets.FloatSlider(name='X-axis Slider', start=1, end=30, value=10, step=1)
y_axis_slider = pn.widgets.FloatSlider(name='Y-axis Slider', start=-50, end=200, value=100, step=1)
# Text pane below Y-axis slider to display current egoYawRate (deg/s) and egoSpeed (m/s)
stats_pane = pn.pane.Markdown("", sizing_mode="stretch_width")
filter_panel = pn.Column(eyr_slider, es_slider, mp_slider, age_slider, x_axis_slider, y_axis_slider, stats_pane, sizing_mode="stretch_width")

# --- New Radar Cycle Navigation Controls ---
step_button = pn.widgets.Button(name="Step 1", button_type="primary")
animate_button = pn.widgets.Button(name="Animate", button_type="success")
step_size_input = pn.widgets.TextInput(name="Step Size (s)", value="2", width=100)
stop_button = pn.widgets.Button(name="Stop", button_type="warning")

animate_callback = None  # global variable to hold periodic callback id

def step_callback(event):
    current_value = radar_cycle_slider.value
    idx = unique_mcs.index(current_value)
    if idx < len(unique_mcs) - 1:
        radar_cycle_slider.value = unique_mcs[idx + 1]
    else:
        radar_cycle_slider.value = unique_mcs[0]

step_button.on_click(step_callback)

def animate_func():
    step_callback(None)

def animate_click(event):
    global animate_callback
    try:
        val = float(step_size_input.value)
    except:
        val = 2.0
    # If val is an integer (or integer-equivalent), then interpret it as cycles per second.
    # Else, use its float value.
    if float(val).is_integer():
        period = int(1000 / val)
    else:
        period = int(1000 / val)
    animate_callback = pn.state.add_periodic_callback(animate_func, period)

animate_button.on_click(animate_click)

def stop_click(event):
    pn.state.clear_periodic_callbacks()

stop_button.on_click(stop_click)

# Arrange radar cycle slider and navigation buttons in one row.
radar_control_row = pn.Row(radar_cycle_slider, cycle_input, cycle_go_button, step_button, animate_button, step_size_input, stop_button, sizing_mode="stretch_width")

# Save Button.
save_button = pn.widgets.Button(name='Save Current State', button_type="primary")

# ---------------------------
# Prepare ColumnDataSources
# ---------------------------
object_scatter_source = ColumnDataSource(data=dict(x=[], y=[], color=[], size=[], hover=[]))
object_rect_source = ColumnDataSource(data=dict(rx=[], ry=[], rwidth=[], rheight=[], rangle=[], rcolor=[]))
ego_source = ColumnDataSource(data=dict(x=[0], y=[0], hover=[""]))

ts_source_ego = ColumnDataSource(data=dict(mc=[], poe=[]))
ts_source_left = ColumnDataSource(data=dict(mc=[], poe=[]))
ts_source_right = ColumnDataSource(data=dict(mc=[], poe=[]))

# ---------------------------
# Create Bokeh Figures
# ---------------------------
# Bird's Eye View (only the object plot) is renamed to "Bird's Eye View"
birdseye_plot = figure(
    title="Bird's Eye View", 
    sizing_mode="stretch_both", 
    tools="pan,wheel_zoom,reset",
    height=1000
)
birdseye_plot.x_range.start = -x_axis_slider.value
birdseye_plot.x_range.end = x_axis_slider.value
birdseye_plot.y_range.start = -2
birdseye_plot.y_range.end = y_axis_slider.value

# Vertical dotted lines (x-axis represents global y)
for xv in [-6, -2, 2, 6]:
    span = Span(location=xv, dimension='height', line_color='purple', line_dash='dotted', line_width=1)
    birdseye_plot.add_layout(span)

# Bold border lines on right and top edges.
right_border = Span(location=birdseye_plot.x_range.end, dimension='height', line_color="black", line_width=3)
top_border = Span(location=birdseye_plot.y_range.end, dimension='width', line_color="black", line_width=3)
birdseye_plot.add_layout(right_border)
birdseye_plot.add_layout(top_border)

# Scatter points for objects.
scatter_renderer = birdseye_plot.scatter(
    'x', 'y', source=object_scatter_source,
    size='size', color='color', fill_alpha=0.6
)

# Bounding boxes via rect glyph.
rect_renderer = birdseye_plot.rect(
    'rx', 'ry', width='rwidth', height='rheight', angle='rangle',
    source=object_rect_source, fill_color='rcolor', fill_alpha=0.4, line_color='rcolor', line_width=1
)

# Ego point.
ego_renderer = birdseye_plot.scatter(
    'x', 'y', source=ego_source, size=4, color='black', fill_alpha=1.0
)

# Hover tools: For objects and ego.
object_hover = HoverTool(tooltips=[("Details", "@hover")], renderers=[scatter_renderer])
birdseye_plot.add_tools(object_hover)
ego_hover = HoverTool(tooltips=[("Ego", "@hover")], renderers=[ego_renderer])
birdseye_plot.add_tools(ego_hover)

# TIME-SERIES PLOTS (titles now without HTML tags)
ts_plot_ego = figure(
    title="inEgoLaneOOI", 
    sizing_mode="stretch_both", 
    tools="pan,wheel_zoom,reset", 
    y_range=(0, 100)
)
ts_plot_ego.line('mc', 'poe', source=ts_source_ego, line_width=1, color='blue')
ts_plot_ego.circle('mc', 'poe', source=ts_source_ego, size=3, color='blue')

ts_plot_left = figure(
    title="inLeftEgoLaneOOI", 
    sizing_mode="stretch_both", 
    tools="pan,wheel_zoom,reset", 
    y_range=(0, 100)
)
ts_plot_left.line('mc', 'poe', source=ts_source_left, line_width=1, color='green')
ts_plot_left.circle('mc', 'poe', source=ts_source_left, size=3, color='green')

ts_plot_right = figure(
    title="inRightEgoLaneOOI", 
    sizing_mode="stretch_both", 
    tools="pan,wheel_zoom,reset", 
    y_range=(0, 100)
)
ts_plot_right.line('mc', 'poe', source=ts_source_right, line_width=1, color='magenta')
ts_plot_right.circle('mc', 'poe', source=ts_source_right, size=3, color='magenta')

empty_plot = figure(sizing_mode="stretch_both", toolbar_location=None)

# ---------------------------
# Callback Functions
# ---------------------------
def update_object_plot():
    """Update the Bird's Eye View plot using real data."""
    current_mc = radar_cycle_slider.value
    # Update axis limits.
    x_lim = x_axis_slider.value
    y_lim = y_axis_slider.value
    birdseye_plot.x_range.start = -x_lim
    birdseye_plot.x_range.end = x_lim
    birdseye_plot.y_range.start = -2
    birdseye_plot.y_range.end = y_lim
    right_border.location = birdseye_plot.x_range.end
    top_border.location = birdseye_plot.y_range.end

    # Filter data for the selected radar cycle.
    df_cycle = df[df.mc == current_mc].to_pandas_df()
    # Apply additional filters.
    filtered = df_cycle[
        (df_cycle.egoYawRate < np.radians(2)) &  # using radian threshold here for filtering
        (df_cycle.egoSpeed > es_slider.value) &
        (df_cycle.mirrProb < mp_slider.value) &
        (df_cycle.lc > age_slider.value)
    ]
    # Then further apply absolute egoYawRate condition in deg/s.
    if not filtered.empty:
        filtered = filtered[np.abs(np.degrees(filtered['egoYawRate'])) < 2]
    if filtered.empty:
        filtered = df_cycle  # fallback to full cycle if filters remove all objects

    # Update stats pane (show current egoYawRate in deg/s and egoSpeed from first object).
    if not filtered.empty:
        first = filtered.iloc[0]
        stats_text = f"egoYawRate: {math.degrees(first['egoYawRate']):.3f} deg/s, egoSpeed: {first['egoSpeed']:.3f} m/s"
    else:
        stats_text = "egoYawRate: N/A, egoSpeed: N/A"
    stats_pane.object = stats_text

    scatter_x, scatter_y, colors, sizes, hovers = [], [], [], [], []
    rect_rx, rect_ry, rect_widths, rect_heights, rect_angles, rect_colors = [], [], [], [], [], []
    
    for _, row in filtered.iterrows():
        # Determine color and scatter size.
        if row['OOI'] == 1:
            col = 'red'
            size_val = 4
        elif row['LOS'] == 1 and row['label'] == 1:
            col = 'blue'
            size_val = 3
        elif row['LOS'] == 1 and row['label'] == 2:
            col = 'green'
            size_val = 3
        elif row['LOS'] == 1 and row['label'] == 3:
            col = 'magenta'
            size_val = 3
        else:
            col = 'grey'
            size_val = 2

        # Format hover text as 3 vertical rows.
        hover_text = (f"id: {int(row['id'])}, vx: {row['vx']:.2f}, vy: {row['vy']:.2f}\n"
                      f"mirrProb: {int(row['mirrProb'])}, poe: {int(row['poe'])}, pfd: {row['pfd']:.4f}\n"
                      f"dp: {int(row['dp'])}")
        
        # For scatter: plot x = global y, y = global x.
        scatter_x.append(row['y'])
        scatter_y.append(row['x'])
        colors.append(col)
        sizes.append(size_val)
        hovers.append(hover_text)
        
        # Compute bounding box parameters using the rect glyph approach.
        # Use object's center as its (x, y) position.
        # Width = (wl + wr) and Height = (lf + lr) (no additional scaling now).
        rwidth = row['wl'] + row['wr']
        rheight = row['lf'] + row['lr']
        rx = row['y']
        ry = row['x']
        rangle = math.pi/2 - row['orient']
        rect_rx.append(rx)
        rect_ry.append(ry)
        rect_widths.append(rwidth)
        rect_heights.append(rheight)
        rect_angles.append(rangle)
        rect_colors.append(col)
    
    object_scatter_source.data = dict(x=scatter_x, y=scatter_y, color=colors, size=sizes, hover=hovers)
    object_rect_source.data = dict(
        rx=rect_rx, ry=rect_ry, rwidth=rect_widths, rheight=rect_heights,
        rangle=rect_angles, rcolor=rect_colors
    )
    
    # Update ego point.
    ego_info = filtered.iloc[0]
    ego_hover_text = (f"mc: {int(ego_info['mc'])}, "
                      f"egoSpeed: {ego_info['egoSpeed']:.3f}, "
                      f"egoYawRate: {math.degrees(ego_info['egoYawRate']):.3f} deg/s")
    ego_source.data = dict(x=[0], y=[0], hover=[ego_hover_text])

def update_time_series(source, label_val, title_prefix):
    current_mc = radar_cycle_slider.value
    df_cycle = df[df.mc == current_mc].to_pandas_df()
    obj_data = df_cycle[(df_cycle.OOI == 1) & (df_cycle.label == label_val)]
    if not obj_data.empty:
        obj_id = obj_data.iloc[0]['id']
        current_poe = obj_data.iloc[0]['poe']
        df_obj = df[df.id == obj_id].to_pandas_df()
        df_obj = df_obj[(df_obj.mc >= current_mc - 5) & (df_obj.mc <= current_mc + 5)]
        df_obj = df_obj.sort_values('mc')
        source.data = dict(mc=df_obj['mc'].tolist(), poe=df_obj['poe'].tolist())
        return f"{title_prefix} OOId: {obj_id} | POE: {current_poe}"
    else:
        source.data = dict(mc=[], poe=[])
        return f"{title_prefix} No Data"

def update_all(event=None):
    update_object_plot()
    title_ego = update_time_series(ts_source_ego, 1, "inEgoLaneOOI")
    title_left = update_time_series(ts_source_left, 2, "inLeftEgoLaneOOI")
    title_right = update_time_series(ts_source_right, 3, "inRightEgoLaneOOI")
    ts_plot_ego.title.text = title_ego
    ts_plot_left.title.text = title_left
    ts_plot_right.title.text = title_right

for widget in [radar_cycle_slider, x_axis_slider, y_axis_slider, eyr_slider, es_slider, mp_slider, age_slider]:
    widget.param.watch(update_all, 'value')

def save_callback(event):
    pn.state.clear_periodic_callbacks()  # Stop any animation.
    update_all()
    pn.panel(dashboard_layout).save('dashboard_state.html', resources='inline')
    print(f"[{time.time()-dashboard_start:.3f} sec] Dashboard state saved.")

save_button.on_click(save_callback)

# ---------------------------
# LAYOUT CONSTRUCTION
# ---------------------------
header_section = pn.pane.Markdown(
    "<h1 style='font-family: Courier New, monospace; text-align: center;'>Objects of Interest (OOI)</h1>",
    sizing_mode="stretch_width", height=50
)

# Arrange radar cycle slider and navigation controls in one row.
radar_control_row = pn.Row(radar_cycle_slider, cycle_input, cycle_go_button, step_button, animate_button, step_size_input, stop_button, sizing_mode="stretch_width")

slider_section = pn.Row(radar_control_row, sizing_mode="stretch_width", height=50)

# Grid layout: 2 rows x 3 columns.
# • Column 0: Filter Panel (row 0) and ts_plot_left (row 1)
# • Column 1: Bird's Eye View spanning both rows
# • Column 2: ts_plot_ego (row 0) and ts_plot_right (row 1)
grid = pn.GridSpec(sizing_mode='stretch_both', max_height=1000)
grid[0, 0] = filter_panel
grid[1, 0] = ts_plot_left
grid[0:2, 1] = birdseye_plot
grid[0, 2] = ts_plot_ego
grid[1, 2] = ts_plot_right

dashboard_layout = pn.Column(header_section, slider_section, grid, save_button, sizing_mode="stretch_both", margin=0)

# Initial update with real data.
update_all()

dashboard_layout.servable()
print(f"[{time.time()-dashboard_start:.3f} sec] Dashboard creation complete.")

# ---------------------------
# LAUNCH THE DASHBOARD
# ---------------------------
pn.serve(dashboard_layout, show=True, start=True)
