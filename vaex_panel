import vaex
import panel as pn
import plotly.graph_objects as go
import numpy as np

# Load data
df = vaex.open('data.feather')

# Filter relevant radar cycles
df['relevant'] = df['egoYawRate'].abs() < np.deg2rad(2)
relevant_cycles = df[df['relevant']]

# Function to get objects in direct line of sight
def get_direct_los(df):
    df = df.sort(['y'], ascending=False)  # Sort by y (distance from ego)
    seen_x_positions = set()
    los_mask = []
    for x in df['x'].values:
        if x in seen_x_positions:
            los_mask.append(False)
        else:
            los_mask.append(True)
            seen_x_positions.add(x)
    df['directLOS'] = los_mask
    return df[df['directLOS']]

df_los = get_direct_los(relevant_cycles)

def categorize_objects(df):
    conditions = [
        (df['x'].between(-2, 2), 'inEgoLane'),
        (df['x'].between(-6, -2), 'inLeftEgoLane'),
        (df['x'].between(2, 6), 'inRightEgoLane')
    ]
    df['category'] = 'irrelevant'
    for cond, label in conditions:
        df['category'] = df['category'].where(~cond, label)
    return df

df_los = categorize_objects(df_los)

# Create interactive widgets
cycle_slider = pn.widgets.IntSlider(name='Radar Cycle', start=int(df['mc'].min()), end=int(df['mc'].max()), step=1, value=int(df['mc'].min()))
y_axis_slider = pn.widgets.FloatSlider(name='Y-Axis Max', start=-200, end=200, step=1, value=100)
x_axis_slider = pn.widgets.FloatSlider(name='X-Axis Limit (+/-)', start=1, end=30, step=1, value=10)

# Function to update the plot
def update_plot(cycle, y_max, x_limit):
    subset = df_los[df_los['mc'] == cycle]
    colors = {'inEgoLane': 'red', 'inLeftEgoLane': 'blue', 'inRightEgoLane': 'green', 'irrelevant': 'grey'}
    sizes = {'inEgoLane': 3, 'inLeftEgoLane': 3, 'inRightEgoLane': 3, 'irrelevant': 2}
    traces = []
    for category, color in colors.items():
        cat_subset = subset[subset['category'] == category]
        traces.append(go.Scattergl(
            x=cat_subset['y'], y=cat_subset['x'], mode='markers',
            marker=dict(size=sizes[category], color=color),
            text=cat_subset[['vx', 'vy', 'dp', 'poe', 'pfd']].to_dict('records'),
            hoverinfo='text'
        ))
    fig = go.Figure(traces)
    fig.update_layout(
        title=dict(text='Objects of Interest (OOI)', x=1, y=1, xanchor='right', yanchor='top', font=dict(size=12, bold=True)),
        xaxis=dict(range=[-x_limit, x_limit]),
        yaxis=dict(range=[0, y_max]),
        width=900, height=400, margin=dict(l=0, r=0, t=0, b=0)
    )
    return fig

plot = pn.bind(update_plot, cycle_slider, y_axis_slider, x_axis_slider)

def save_plot():
    fig = update_plot(cycle_slider.value, y_axis_slider.value, x_axis_slider.value)
    fig.write_html("saved_plot.html")
    print("Plot saved as saved_plot.html")

save_button = pn.widgets.Button(name='Save Plot', button_type='primary')
save_button.on_click(lambda event: save_plot())

dash_layout = pn.Column(
    pn.Row(cycle_slider, y_axis_slider, x_axis_slider, save_button),
    plot
)

pn.extension()
dash_layout.show(port=5006)
